package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"encoding/json"
	"fmt"

	gmodel "github.com/semanser/ai-coder/graph/model"
	"github.com/semanser/ai-coder/models"
	"gorm.io/datatypes"
)

// CreateFlow is the resolver for the createFlow field.
func (r *mutationResolver) CreateFlow(ctx context.Context) (*gmodel.Flow, error) {
	flow := models.Flow{}
	tx := r.Db.Create(&flow)

	if tx.Error != nil {
		return nil, tx.Error
	}

	return &gmodel.Flow{
		ID:    flow.ID,
		Tasks: []*gmodel.Task{},
	}, nil
}

type InputTaskArgs struct {
	Query string `json:"query"`
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, query string) (*gmodel.Task, error) {
	args := InputTaskArgs{Query: query}
	arg, err := json.Marshal(args)
	if err != nil {
		return nil, err
	}

	task := models.Task{
		Type:   models.Input,
		Status: models.Finished,
		Args:   datatypes.JSON(arg),
	}

	tx := r.Db.Create(&task)

	if tx.Error != nil {
		return nil, tx.Error
	}

	return &gmodel.Task{
		ID:     task.ID,
		Type:   gmodel.TaskType(task.Type),
		Status: gmodel.TaskStatus(task.Status),
		Args:   task.Args.String(),
	}, nil
}

// Flows is the resolver for the flows field.
func (r *queryResolver) Flows(ctx context.Context) ([]*gmodel.Flow, error) {
	panic(fmt.Errorf("not implemented: Flows - flows"))
}

// TaskAdded is the resolver for the taskAdded field.
func (r *subscriptionResolver) TaskAdded(ctx context.Context) (<-chan *gmodel.Task, error) {
	panic(fmt.Errorf("not implemented: TaskAdded - taskAdded"))
}

// TaskUpdated is the resolver for the taskUpdated field.
func (r *subscriptionResolver) TaskUpdated(ctx context.Context) (<-chan *gmodel.Task, error) {
	panic(fmt.Errorf("not implemented: TaskUpdated - taskUpdated"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
